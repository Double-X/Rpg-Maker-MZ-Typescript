declare function Game_BattlerBase(...args: any[]): void;
declare class Game_BattlerBase {
    constructor(...args: any[]);
    initialize(): void;
    initMembers(): void;
    _hp: any;
    _mp: any;
    _tp: any;
    _hidden: boolean;
    clearParamPlus(): void;
    _paramPlus: number[];
    clearStates(): void;
    _states: any[];
    _stateTurns: {};
    eraseState(stateId: any): void;
    isStateAffected(stateId: any): boolean;
    isDeathStateAffected(): boolean;
    deathStateId(): number;
    resetStateCounts(stateId: any): void;
    isStateExpired(stateId: any): boolean;
    updateStateTurns(): void;
    clearBuffs(): void;
    _buffs: number[];
    _buffTurns: number[];
    eraseBuff(paramId: any): void;
    buffLength(): number;
    buff(paramId: any): number;
    isBuffAffected(paramId: any): boolean;
    isDebuffAffected(paramId: any): boolean;
    isBuffOrDebuffAffected(paramId: any): boolean;
    isMaxBuffAffected(paramId: any): boolean;
    isMaxDebuffAffected(paramId: any): boolean;
    increaseBuff(paramId: any): void;
    decreaseBuff(paramId: any): void;
    overwriteBuffTurns(paramId: any, turns: any): void;
    isBuffExpired(paramId: any): boolean;
    updateBuffTurns(): void;
    die(): void;
    revive(): void;
    states(): any[];
    stateIcons(): any[];
    buffIcons(): any[];
    buffIconIndex(buffLevel: any, paramId: any): any;
    allIcons(): any[];
    traitObjects(): any[];
    allTraits(): any;
    traits(code: any): any;
    traitsWithId(code: any, id: any): any;
    traitsPi(code: any, id: any): any;
    traitsSum(code: any, id: any): any;
    traitsSumAll(code: any): any;
    traitsSet(code: any): any;
    paramBase(): number;
    paramPlus(paramId: any): number;
    paramBasePlus(paramId: any): number;
    paramMin(paramId: any): 1 | 0;
    paramMax(): number;
    paramRate(paramId: any): any;
    paramBuffRate(paramId: any): number;
    param(paramId: any): number;
    xparam(xparamId: any): any;
    sparam(sparamId: any): any;
    elementRate(elementId: any): any;
    debuffRate(paramId: any): any;
    stateRate(stateId: any): any;
    stateResistSet(): any;
    isStateResist(stateId: any): any;
    attackElements(): any;
    attackStates(): any;
    attackStatesRate(stateId: any): any;
    attackSpeed(): any;
    attackTimesAdd(): number;
    attackSkillId(): number;
    addedSkillTypes(): any;
    isSkillTypeSealed(stypeId: any): any;
    addedSkills(): any;
    isSkillSealed(skillId: any): any;
    isEquipWtypeOk(wtypeId: any): any;
    isEquipAtypeOk(atypeId: any): any;
    isEquipTypeLocked(etypeId: any): any;
    isEquipTypeSealed(etypeId: any): any;
    slotType(): number;
    isDualWield(): boolean;
    actionPlusSet(): any;
    specialFlag(flagId: any): any;
    collapseType(): number;
    partyAbility(abilityId: any): any;
    isAutoBattle(): any;
    isGuard(): boolean;
    isSubstitute(): boolean;
    isPreserveTp(): any;
    addParam(paramId: any, value: any): void;
    setHp(hp: any): void;
    setMp(mp: any): void;
    setTp(tp: any): void;
    maxTp(): number;
    refresh(): void;
    recoverAll(): void;
    hpRate(): number;
    mpRate(): number;
    tpRate(): number;
    hide(): void;
    appear(): void;
    isHidden(): boolean;
    isAppeared(): boolean;
    isDead(): boolean;
    isAlive(): boolean;
    isDying(): boolean;
    isRestricted(): boolean;
    canInput(): boolean;
    canMove(): boolean;
    isConfused(): boolean;
    confusionLevel(): number;
    isActor(): boolean;
    isEnemy(): boolean;
    sortStates(): void;
    restriction(): number;
    addNewState(stateId: any): void;
    onRestrict(): void;
    mostImportantStateText(): any;
    stateMotionIndex(): any;
    stateOverlayIndex(): any;
    isSkillWtypeOk(): boolean;
    skillMpCost(skill: any): number;
    skillTpCost(skill: any): any;
    canPaySkillCost(skill: any): boolean;
    paySkillCost(skill: any): void;
    isOccasionOk(item: any): boolean;
    meetsUsableItemConditions(item: any): boolean;
    meetsSkillConditions(skill: any): boolean;
    meetsItemConditions(item: any): any;
    canUse(item: any): any;
    canEquip(item: any): boolean;
    canEquipWeapon(item: any): boolean;
    canEquipArmor(item: any): boolean;
    guardSkillId(): number;
    canAttack(): any;
    canGuard(): any;
}
declare namespace Game_BattlerBase {
    const TRAIT_ELEMENT_RATE: number;
    const TRAIT_DEBUFF_RATE: number;
    const TRAIT_STATE_RATE: number;
    const TRAIT_STATE_RESIST: number;
    const TRAIT_PARAM: number;
    const TRAIT_XPARAM: number;
    const TRAIT_SPARAM: number;
    const TRAIT_ATTACK_ELEMENT: number;
    const TRAIT_ATTACK_STATE: number;
    const TRAIT_ATTACK_SPEED: number;
    const TRAIT_ATTACK_TIMES: number;
    const TRAIT_ATTACK_SKILL: number;
    const TRAIT_STYPE_ADD: number;
    const TRAIT_STYPE_SEAL: number;
    const TRAIT_SKILL_ADD: number;
    const TRAIT_SKILL_SEAL: number;
    const TRAIT_EQUIP_WTYPE: number;
    const TRAIT_EQUIP_ATYPE: number;
    const TRAIT_EQUIP_LOCK: number;
    const TRAIT_EQUIP_SEAL: number;
    const TRAIT_SLOT_TYPE: number;
    const TRAIT_ACTION_PLUS: number;
    const TRAIT_SPECIAL_FLAG: number;
    const TRAIT_COLLAPSE_TYPE: number;
    const TRAIT_PARTY_ABILITY: number;
    const FLAG_ID_AUTO_BATTLE: number;
    const FLAG_ID_GUARD: number;
    const FLAG_ID_SUBSTITUTE: number;
    const FLAG_ID_PRESERVE_TP: number;
    const ICON_BUFF_START: number;
    const ICON_DEBUFF_START: number;
}
