declare function Game_Map(...args: any[]): void;
declare class Game_Map {
    constructor(...args: any[]);
    initialize(): void;
    _interpreter: Game_Interpreter;
    _mapId: any;
    _tilesetId: any;
    _events: any[];
    _commonEvents: any[];
    _vehicles: any[];
    _displayX: any;
    _displayY: any;
    _nameDisplay: boolean;
    _scrollDirection: any;
    _scrollRest: any;
    _scrollSpeed: any;
    _parallaxName: any;
    _parallaxZero: boolean;
    _parallaxLoopX: any;
    _parallaxLoopY: any;
    _parallaxSx: any;
    _parallaxSy: any;
    _parallaxX: any;
    _parallaxY: any;
    _battleback1Name: any;
    _battleback2Name: any;
    setup(mapId: any): void;
    _needsRefresh: boolean;
    isEventRunning(): boolean;
    tileWidth(): number;
    tileHeight(): number;
    mapId(): any;
    tilesetId(): any;
    displayX(): any;
    displayY(): any;
    parallaxName(): any;
    battleback1Name(): any;
    battleback2Name(): any;
    requestRefresh(): void;
    isNameDisplayEnabled(): boolean;
    disableNameDisplay(): void;
    enableNameDisplay(): void;
    createVehicles(): void;
    refereshVehicles(): void;
    vehicles(): any[];
    vehicle(type: any): any;
    boat(): any;
    ship(): any;
    airship(): any;
    setupEvents(): void;
    events(): any[];
    event(eventId: any): any;
    eraseEvent(eventId: any): void;
    autorunCommonEvents(): any;
    parallelCommonEvents(): any;
    setupScroll(): void;
    setupParallax(): void;
    setupBattleback(): void;
    setDisplayPos(x: any, y: any): void;
    parallaxOx(): number;
    parallaxOy(): number;
    tileset(): any;
    tilesetFlags(): any;
    displayName(): any;
    width(): any;
    height(): any;
    data(): any;
    isLoopHorizontal(): boolean;
    isLoopVertical(): boolean;
    isDashDisabled(): any;
    encounterList(): any;
    encounterStep(): any;
    isOverworld(): boolean;
    screenTileX(): number;
    screenTileY(): number;
    adjustX(x: any): any;
    adjustY(y: any): any;
    roundX(x: any): any;
    roundY(y: any): any;
    xWithDirection(x: any, d: any): any;
    yWithDirection(y: any, d: any): any;
    roundXWithDirection(x: any, d: any): any;
    roundYWithDirection(y: any, d: any): any;
    deltaX(x1: any, x2: any): number;
    deltaY(y1: any, y2: any): number;
    distance(x1: any, y1: any, x2: any, y2: any): number;
    canvasToMapX(x: any): any;
    canvasToMapY(y: any): any;
    autoplay(): void;
    refreshIfNeeded(): void;
    refresh(): void;
    refreshTileEvents(): void;
    _tileEvents: any[];
    eventsXy(x: any, y: any): any[];
    eventsXyNt(x: any, y: any): any[];
    tileEventsXy(x: any, y: any): any[];
    eventIdXy(x: any, y: any): any;
    scrollDown(distance: any): void;
    scrollLeft(distance: any): void;
    scrollRight(distance: any): void;
    scrollUp(distance: any): void;
    isValid(x: any, y: any): boolean;
    checkPassage(x: any, y: any, bit: any): boolean;
    tileId(x: any, y: any, z: any): any;
    layeredTiles(x: any, y: any): any[];
    allTiles(x: any, y: any): any[];
    autotileType(x: any, y: any, z: any): number;
    isPassable(x: any, y: any, d: any): boolean;
    isBoatPassable(x: any, y: any): boolean;
    isShipPassable(x: any, y: any): boolean;
    isAirshipLandOk(x: any, y: any): boolean;
    checkLayeredTilesFlags(x: any, y: any, bit: any): boolean;
    isLadder(x: any, y: any): boolean;
    isBush(x: any, y: any): boolean;
    isCounter(x: any, y: any): boolean;
    isDamageFloor(x: any, y: any): boolean;
    terrainTag(x: any, y: any): number;
    regionId(x: any, y: any): any;
    startScroll(direction: any, distance: any, speed: any): void;
    isScrolling(): boolean;
    update(sceneActive: any): void;
    updateScroll(): void;
    scrollDistance(): number;
    doScroll(direction: any, distance: any): void;
    updateEvents(): void;
    updateVehicles(): void;
    updateParallax(): void;
    changeTileset(tilesetId: any): void;
    changeBattleback(battleback1Name: any, battleback2Name: any): void;
    changeParallax(name: any, loopX: any, loopY: any, sx: any, sy: any): void;
    updateInterpreter(): void;
    unlockEvent(eventId: any): void;
    setupStartingEvent(): boolean;
    setupTestEvent(): boolean;
    setupStartingMapEvent(): boolean;
    setupAutorunCommonEvent(): boolean;
    isAnyEventStarting(): boolean;
}
