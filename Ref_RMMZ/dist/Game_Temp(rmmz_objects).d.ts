declare function Game_Temp(...args: any[]): void;
declare class Game_Temp {
    constructor(...args: any[]);
    initialize(): void;
    _isPlaytest: boolean;
    _destinationX: any;
    _destinationY: any;
    _touchTarget: any;
    _touchState: any;
    _needsBattleRefresh: boolean;
    _commonEventQueue: any[];
    _animationQueue: any[];
    _balloonQueue: any[];
    _lastActionData: number[];
    isPlaytest(): boolean;
    setDestination(x: any, y: any): void;
    clearDestination(): void;
    isDestinationValid(): boolean;
    destinationX(): any;
    destinationY(): any;
    setTouchState(target: any, state: any): void;
    clearTouchState(): void;
    touchTarget(): any;
    touchState(): any;
    requestBattleRefresh(): void;
    clearBattleRefreshRequest(): void;
    isBattleRefreshRequested(): boolean;
    reserveCommonEvent(commonEventId: any): void;
    retrieveCommonEvent(): any;
    isCommonEventReserved(): boolean;
    requestAnimation(targets: any, animationId: any, mirror?: boolean): void;
    retrieveAnimation(): any;
    requestBalloon(target: any, balloonId: any): void;
    retrieveBalloon(): any;
    lastActionData(type: any): number;
    setLastActionData(type: any, value: any): void;
    setLastUsedSkillId(skillID: any): void;
    setLastUsedItemId(itemID: any): void;
    setLastSubjectActorId(actorID: any): void;
    setLastSubjectEnemyIndex(enemyIndex: any): void;
    setLastTargetActorId(actorID: any): void;
    setLastTargetEnemyIndex(enemyIndex: any): void;
}
