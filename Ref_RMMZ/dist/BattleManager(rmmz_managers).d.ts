declare function BattleManager(): void;
declare namespace BattleManager {
    function setup(troopId: any, canEscape: any, canLose: any): void;
    function initMembers(): void;
    function isTpb(): boolean;
    function isActiveTpb(): boolean;
    function isBattleTest(): any;
    function setBattleTest(battleTest: any): void;
    function setEventCallback(callback: any): void;
    function setLogWindow(logWindow: any): void;
    function setSpriteset(spriteset: any): void;
    function onEncounter(): void;
    function ratePreemptive(): any;
    function rateSurprise(): any;
    function saveBgmAndBgs(): void;
    function playBattleBgm(): void;
    function playVictoryMe(): void;
    function playDefeatMe(): void;
    function replayBgmAndBgs(): void;
    function makeEscapeRatio(): void;
    function update(timeActive: any): void;
    function updatePhase(timeActive: any): void;
    function updateEvent(): boolean;
    function updateEventMain(): boolean;
    function isBusy(): any;
    function updateTpbInput(): void;
    function checkTpbInputClose(): void;
    function checkTpbInputOpen(): void;
    function isPartyTpbInputtable(): boolean;
    function needsActorInputCancel(): boolean;
    function isTpbMainPhase(): boolean;
    function isInputting(): any;
    function isInTurn(): boolean;
    function isTurnEnd(): boolean;
    function isAborting(): boolean;
    function isBattleEnd(): boolean;
    function canEscape(): any;
    function canLose(): any;
    function isEscaped(): any;
    function actor(): any;
    function startBattle(): void;
    function displayStartMessages(): void;
    function startInput(): void;
    function inputtingAction(): any;
    function selectNextCommand(): void;
    function selectNextActor(): void;
    function selectPreviousCommand(): void;
    function selectPreviousActor(): void;
    function changeCurrentActor(forward: any): void;
    function startActorInput(): void;
    function finishActorInput(): void;
    function cancelActorInput(): void;
    function updateStart(): void;
    function startTurn(): void;
    function updateTurn(timeActive: any): void;
    function updateTpb(): void;
    function updateAllTpbBattlers(): void;
    function updateTpbBattler(battler: any): void;
    function checkTpbTurnEnd(): void;
    function processTurn(): void;
    function endBattlerActions(battler: any): void;
    function endTurn(): void;
    function endAllBattlersTurn(): void;
    function displayBattlerStatus(battler: any, current: any): void;
    function updateTurnEnd(): void;
    function getNextSubject(): any;
    function allBattleMembers(): any;
    function makeActionOrders(): void;
    function startAction(): void;
    function updateAction(): void;
    function endAction(): void;
    function invokeAction(subject: any, target: any): void;
    function invokeNormalAction(subject: any, target: any): void;
    function invokeCounterAttack(subject: any, target: any): void;
    function invokeMagicReflection(subject: any, target: any): void;
    function applySubstitute(target: any): any;
    function checkSubstitute(target: any): boolean;
    function isActionForced(): boolean;
    function forceAction(battler: any): void;
    function processForcedAction(): void;
    function abort(): void;
    function checkBattleEnd(): boolean;
    function checkAbort(): boolean;
    function processVictory(): void;
    function processEscape(): boolean;
    function onEscapeSuccess(): void;
    function onEscapeFailure(): void;
    function processAbort(): void;
    function processDefeat(): void;
    function endBattle(result: any): void;
    function updateBattleEnd(): void;
    function makeRewards(): void;
    function displayVictoryMessage(): void;
    function displayDefeatMessage(): void;
    function displayEscapeSuccessMessage(): void;
    function displayEscapeFailureMessage(): void;
    function displayRewards(): void;
    function displayExp(): void;
    function displayGold(): void;
    function displayDropItems(): void;
    function gainRewards(): void;
    function gainExp(): void;
    function gainGold(): void;
    function gainDropItems(): void;
}
